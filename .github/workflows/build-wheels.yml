name: Release wheels

on:
  workflow_dispatch:
    inputs:
      increment:
        description: 'Version bump (+1=major, +0.1=minor, +0.0.1=patch)'
        required: true
        default: '+0.0.1'
        type: choice
        options: ['+1', '+0.1', '+0.0.1']

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
      sha: ${{ steps.commit.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Bump version
        id: bump
        run: |
          new_version=$(python .github/scripts/bump_version.py ${{ inputs.increment }})
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
      - name: Commit version
        id: commit
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git commit -am "Bump version to ${{ steps.bump.outputs.version }}"
          git tag "v${{ steps.bump.outputs.version }}"
          git push origin HEAD --tags
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  build:
    name: Build wheels on ${{ matrix.os }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ needs.prepare.outputs.sha }} }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade cibuildwheel twine
      - name: Clean
        run: python - <<'PY'
import shutil, glob, os
for p in ['wheelhouse','build','dist']:
    shutil.rmtree(p, ignore_errors=True)
for e in glob.glob('*.egg-info'):
    shutil.rmtree(e, ignore_errors=True)
PY
      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64 x86"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
      - name: Validate wheel ZIP structure
        run: |
          python - <<'PY'
          import glob, subprocess, sys
          wheels = sorted(glob.glob("wheelhouse/*.whl"))
          if not wheels:
              print("No wheels found"); sys.exit(1)
          for w in wheels:
              print("Testing", w, flush=True)
              subprocess.run([sys.executable, "-m", "zipfile", "-t", w], check=True)
          PY
      - name: Twine metadata check
        run: twine check wheelhouse/*
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
          if-no-files-found: error
          compression-level: 0

  publish:
    runs-on: ubuntu-latest
    needs: [build, prepare]
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: wheelhouse
          merge-multiple: true
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Verify integrity after download
        run: |
          python - <<'PY'
          import glob, subprocess, sys
          wheels = sorted(glob.glob("wheelhouse/*.whl"))
          if not wheels:
              print("No wheels found"); sys.exit(1)
          for w in wheels:
              print("Testing", w, flush=True)
              subprocess.run([sys.executable, "-m", "zipfile", "-t", w], check=True)
          PY
      - name: Generate checksums
        run: |
          python - <<'PY'
          import hashlib, glob, pathlib
          out = pathlib.Path("wheelhouse") / "SHA256SUMS"
          with out.open("w") as fh:
              for p in sorted(glob.glob("wheelhouse/*.whl")):
                  h = hashlib.sha256(open(p,"rb").read()).hexdigest()
                  fh.write(f"{h}  {p.split('/',1)[-1]}\n")
          print("Wrote", out)
          PY
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: v${{ needs.prepare.outputs.version }}
          files: |
            wheelhouse/*.whl
            wheelhouse/SHA256SUMS
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse
