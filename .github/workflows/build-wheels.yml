name: Release wheels

on:
  workflow_dispatch:
    inputs:
      increment:
        description: "Version bump (+1=major, +0.1=minor, +0.0.1=patch)"
        required: true
        default: "+0.0.1"
        type: choice
        options: ["+1", "+0.1", "+0.0.1"]

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version }}
      sha: ${{ steps.commit.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Bump version
        id: bump
        run: |
          new_version=$(python .github/scripts/bump_version.py ${{ inputs.increment }})
          echo "version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Commit version and tag
        id: commit
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git commit -am "Bump version to ${{ steps.bump.outputs.version }}"
          git tag "v${{ steps.bump.outputs.version }}"
          git push origin HEAD --tags
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  build:
    name: Build wheels on ${{ matrix.os }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-13", "macos-14"]

    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ needs.prepare.outputs.sha }} }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade cibuildwheel

      - name: Clean outputs
        shell: bash
        run: |
          rm -rf wheelhouse build dist *.egg-info || true

      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64 x86"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

      - name: Validate wheels (direct zip test)
        shell: bash
        run: |
          python - <<'PY'
import glob, zipfile, sys, pathlib
ws = sorted(glob.glob("wheelhouse/*.whl"))
if not ws:
    sys.exit("No wheels found")
for w in ws:
    p = pathlib.Path(w)
    try:
        with zipfile.ZipFile(w) as z:
            bad = z.testzip()
            if bad:
                sys.exit(p.name + ": corrupt entry " + bad)
    except zipfile.BadZipFile as e:
        sys.exit(p.name + ": bad zip: " + str(e))
print("Validated", len(ws), "wheels")
PY

      - name: Hash wheels (cross-platform)
        shell: bash
        run: |
          python - <<'PY'
import hashlib, glob, pathlib, os
out = pathlib.Path("wheelhouse") / ("SHA256SUMS-" + os.environ.get("RUNNER_OS","unknown"))
with open(out, "w") as fh:
    for p in sorted(glob.glob("wheelhouse/*.whl")):
        h = hashlib.sha256(open(p,"rb").read()).hexdigest()
        fh.write("%s  %s\n" % (h, pathlib.Path(p).name))
print("Wrote", out)
PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: |
            wheelhouse/*.whl
            wheelhouse/SHA256SUMS-*
          if-no-files-found: error
          compression-level: 0

  publish:
    name: Publish to PyPI (Linux only)
    needs: [build, prepare]
    runs-on: ubuntu-latest
    environment: pypi   # must match PyPI Trusted Publisher “Environment”
    permissions:
      id-token: write   # required for OIDC trusted publishing
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: wheelhouse
        # merge-multiple true is default for v4 when using pattern

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Re-validate wheels (direct zip test)
        shell: bash
        run: |
          python - <<'PY'
import glob, zipfile, sys, pathlib
ws = sorted(glob.glob("wheelhouse/*.whl"))
if not ws:
    sys.exit("No wheels found")
for w in ws:
    p = pathlib.Path(w)
    try:
        with zipfile.ZipFile(w) as z:
            bad = z.testzip()
            if bad:
                sys.exit(p.name + ": corrupt entry " + bad)
    except zipfile.BadZipFile as e:
        sys.exit(p.name + ": bad zip: " + str(e))
print("Verified", len(ws), "wheels")
PY

      - name: Twine metadata check
        run: |
          python -m pip install -U twine pkginfo
          twine check wheelhouse/*.whl

      - name: Upload to PyPI (trusted publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse
          skip-existing: true
          verbose: true

  github-release:
    name: Create GitHub Release
    needs: [publish, prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: wheelhouse

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          name: v${{ needs.prepare.outputs.version }}
          files: wheelhouse/*.whl
